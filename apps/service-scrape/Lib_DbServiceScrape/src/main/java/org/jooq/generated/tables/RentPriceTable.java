/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.HomeTable.HomeTablePath;
import org.jooq.generated.tables.records.RentPriceTableRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class RentPriceTable extends TableImpl<RentPriceTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.rent_price_table</code>
     */
    public static final RentPriceTable RENT_PRICE_TABLE = new RentPriceTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RentPriceTableRecord> getRecordType() {
        return RentPriceTableRecord.class;
    }

    /**
     * The column <code>public.rent_price_table.id</code>.
     */
    public final TableField<RentPriceTableRecord, Integer> ID =
            createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.rent_price_table.home_table_id</code>.
     */
    public final TableField<RentPriceTableRecord, Integer> HOME_TABLE_ID =
            createField(DSL.name("home_table_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.rent_price_table.first_scrape_date</code>.
     */
    public final TableField<RentPriceTableRecord, LocalDate> FIRST_SCRAPE_DATE = createField(
            DSL.name("first_scrape_date"),
            SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATE)),
            this,
            "");

    /**
     * The column <code>public.rent_price_table.last_scrape_date</code>.
     */
    public final TableField<RentPriceTableRecord, LocalDate> LAST_SCRAPE_DATE = createField(
            DSL.name("last_scrape_date"),
            SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATE)),
            this,
            "");

    /**
     * The column <code>public.rent_price_table.weekly_rent_aud</code>.
     */
    public final TableField<RentPriceTableRecord, Float> WEEKLY_RENT_AUD =
            createField(DSL.name("weekly_rent_aud"), SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>public.rent_price_table.aud_per_bed</code>.
     */
    public final TableField<RentPriceTableRecord, Float> AUD_PER_BED =
            createField(DSL.name("aud_per_bed"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.rent_price_table.aud_per_land_m2</code>.
     */
    public final TableField<RentPriceTableRecord, Float> AUD_PER_LAND_M2 =
            createField(DSL.name("aud_per_land_m2"), SQLDataType.REAL, this, "");

    private RentPriceTable(Name alias, Table<RentPriceTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RentPriceTable(Name alias, Table<RentPriceTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.rent_price_table</code> table reference
     */
    public RentPriceTable(String alias) {
        this(DSL.name(alias), RENT_PRICE_TABLE);
    }

    /**
     * Create an aliased <code>public.rent_price_table</code> table reference
     */
    public RentPriceTable(Name alias) {
        this(alias, RENT_PRICE_TABLE);
    }

    /**
     * Create a <code>public.rent_price_table</code> table reference
     */
    public RentPriceTable() {
        this(DSL.name("rent_price_table"), null);
    }

    public <O extends Record> RentPriceTable(
            Table<O> path,
            ForeignKey<O, RentPriceTableRecord> childPath,
            InverseForeignKey<O, RentPriceTableRecord> parentPath) {
        super(path, childPath, parentPath, RENT_PRICE_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RentPriceTablePath extends RentPriceTable implements Path<RentPriceTableRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> RentPriceTablePath(
                Table<O> path,
                ForeignKey<O, RentPriceTableRecord> childPath,
                InverseForeignKey<O, RentPriceTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private RentPriceTablePath(Name alias, Table<RentPriceTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RentPriceTablePath as(String alias) {
            return new RentPriceTablePath(DSL.name(alias), this);
        }

        @Override
        public RentPriceTablePath as(Name alias) {
            return new RentPriceTablePath(alias, this);
        }

        @Override
        public RentPriceTablePath as(Table<?> alias) {
            return new RentPriceTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RentPriceTableRecord, Integer> getIdentity() {
        return (Identity<RentPriceTableRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RentPriceTableRecord> getPrimaryKey() {
        return Keys.RENT_PRICE_TABLE_PKEY;
    }

    @Override
    public List<ForeignKey<RentPriceTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RENT_PRICE_TABLE__RENT_PRICE_TABLE_HOME_TABLE_ID_HOME_TABLE_ID_FK);
    }

    private transient HomeTablePath _homeTable;

    /**
     * Get the implicit join path to the <code>public.home_table</code> table.
     */
    public HomeTablePath homeTable() {
        if (_homeTable == null)
            _homeTable = new HomeTablePath(
                    this, Keys.RENT_PRICE_TABLE__RENT_PRICE_TABLE_HOME_TABLE_ID_HOME_TABLE_ID_FK, null);

        return _homeTable;
    }

    @Override
    public RentPriceTable as(String alias) {
        return new RentPriceTable(DSL.name(alias), this);
    }

    @Override
    public RentPriceTable as(Name alias) {
        return new RentPriceTable(alias, this);
    }

    @Override
    public RentPriceTable as(Table<?> alias) {
        return new RentPriceTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RentPriceTable rename(String name) {
        return new RentPriceTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RentPriceTable rename(Name name) {
        return new RentPriceTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RentPriceTable rename(Table<?> name) {
        return new RentPriceTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentPriceTable where(Condition condition) {
        return new RentPriceTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentPriceTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentPriceTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentPriceTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentPriceTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentPriceTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentPriceTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentPriceTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentPriceTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentPriceTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
