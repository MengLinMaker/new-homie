/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.enums.StateAbbreviationEnum;
import org.jooq.generated.tables.HomeTable.HomeTablePath;
import org.jooq.generated.tables.records.LocalitiesTableRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LocalitiesTable extends TableImpl<LocalitiesTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.localities_table</code>
     */
    public static final LocalitiesTable LOCALITIES_TABLE = new LocalitiesTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocalitiesTableRecord> getRecordType() {
        return LocalitiesTableRecord.class;
    }

    /**
     * The column <code>public.localities_table.id</code>.
     */
    public final TableField<LocalitiesTableRecord, Short> ID = createField(DSL.name("id"), SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.localities_table.suburb_name</code>.
     */
    public final TableField<LocalitiesTableRecord, String> SUBURB_NAME = createField(DSL.name("suburb_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.localities_table.postcode</code>.
     */
    public final TableField<LocalitiesTableRecord, String> POSTCODE = createField(DSL.name("postcode"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.localities_table.state_abbreviation</code>.
     */
    public final TableField<LocalitiesTableRecord, StateAbbreviationEnum> STATE_ABBREVIATION = createField(DSL.name("state_abbreviation"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(StateAbbreviationEnum.class), this, "");

    private LocalitiesTable(Name alias, Table<LocalitiesTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LocalitiesTable(Name alias, Table<LocalitiesTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.localities_table</code> table reference
     */
    public LocalitiesTable(String alias) {
        this(DSL.name(alias), LOCALITIES_TABLE);
    }

    /**
     * Create an aliased <code>public.localities_table</code> table reference
     */
    public LocalitiesTable(Name alias) {
        this(alias, LOCALITIES_TABLE);
    }

    /**
     * Create a <code>public.localities_table</code> table reference
     */
    public LocalitiesTable() {
        this(DSL.name("localities_table"), null);
    }

    public <O extends Record> LocalitiesTable(Table<O> path, ForeignKey<O, LocalitiesTableRecord> childPath, InverseForeignKey<O, LocalitiesTableRecord> parentPath) {
        super(path, childPath, parentPath, LOCALITIES_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LocalitiesTablePath extends LocalitiesTable implements Path<LocalitiesTableRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LocalitiesTablePath(Table<O> path, ForeignKey<O, LocalitiesTableRecord> childPath, InverseForeignKey<O, LocalitiesTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LocalitiesTablePath(Name alias, Table<LocalitiesTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LocalitiesTablePath as(String alias) {
            return new LocalitiesTablePath(DSL.name(alias), this);
        }

        @Override
        public LocalitiesTablePath as(Name alias) {
            return new LocalitiesTablePath(alias, this);
        }

        @Override
        public LocalitiesTablePath as(Table<?> alias) {
            return new LocalitiesTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<LocalitiesTableRecord, Short> getIdentity() {
        return (Identity<LocalitiesTableRecord, Short>) super.getIdentity();
    }

    @Override
    public UniqueKey<LocalitiesTableRecord> getPrimaryKey() {
        return Keys.LOCALITIES_TABLE_PKEY;
    }

    private transient HomeTablePath _homeTable;

    /**
     * Get the implicit to-many join path to the <code>public.home_table</code>
     * table
     */
    public HomeTablePath homeTable() {
        if (_homeTable == null)
            _homeTable = new HomeTablePath(this, null, Keys.HOME_TABLE__HOME_TABLE_LOCALITIES_TABLE_ID_LOCALITIES_TABLE_ID_FK.getInverseKey());

        return _homeTable;
    }

    @Override
    public List<Check<LocalitiesTableRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("localities_table_postcode_check"), "((length(postcode) = 4))", true),
            Internal.createCheck(this, DSL.name("localities_table_suburb_name_check"), "((length(suburb_name) < 64))", true)
        );
    }

    @Override
    public LocalitiesTable as(String alias) {
        return new LocalitiesTable(DSL.name(alias), this);
    }

    @Override
    public LocalitiesTable as(Name alias) {
        return new LocalitiesTable(alias, this);
    }

    @Override
    public LocalitiesTable as(Table<?> alias) {
        return new LocalitiesTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LocalitiesTable rename(String name) {
        return new LocalitiesTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LocalitiesTable rename(Name name) {
        return new LocalitiesTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LocalitiesTable rename(Table<?> name) {
        return new LocalitiesTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LocalitiesTable where(Condition condition) {
        return new LocalitiesTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LocalitiesTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LocalitiesTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LocalitiesTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LocalitiesTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LocalitiesTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LocalitiesTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LocalitiesTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LocalitiesTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LocalitiesTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
