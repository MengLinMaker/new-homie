/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.enums.HomeTypeEnum;
import org.jooq.generated.tables.HomeTable.HomeTablePath;
import org.jooq.generated.tables.records.CommonFeaturesTableRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class CommonFeaturesTable extends TableImpl<CommonFeaturesTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.common_features_table</code>
     */
    public static final CommonFeaturesTable COMMON_FEATURES_TABLE = new CommonFeaturesTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommonFeaturesTableRecord> getRecordType() {
        return CommonFeaturesTableRecord.class;
    }

    /**
     * The column <code>public.common_features_table.id</code>.
     */
    public final TableField<CommonFeaturesTableRecord, Integer> ID =
            createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.common_features_table.bed_quantity</code>.
     */
    public final TableField<CommonFeaturesTableRecord, Integer> BED_QUANTITY =
            createField(DSL.name("bed_quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.common_features_table.bath_quantity</code>.
     */
    public final TableField<CommonFeaturesTableRecord, Integer> BATH_QUANTITY =
            createField(DSL.name("bath_quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.common_features_table.car_quantity</code>.
     */
    public final TableField<CommonFeaturesTableRecord, Integer> CAR_QUANTITY =
            createField(DSL.name("car_quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.common_features_table.home_type</code>.
     */
    public final TableField<CommonFeaturesTableRecord, HomeTypeEnum> HOME_TYPE = createField(
            DSL.name("home_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(HomeTypeEnum.class), this, "");

    /**
     * The column <code>public.common_features_table.is_retirement</code>.
     */
    public final TableField<CommonFeaturesTableRecord, Boolean> IS_RETIREMENT =
            createField(DSL.name("is_retirement"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private CommonFeaturesTable(Name alias, Table<CommonFeaturesTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CommonFeaturesTable(
            Name alias, Table<CommonFeaturesTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.common_features_table</code> table
     * reference
     */
    public CommonFeaturesTable(String alias) {
        this(DSL.name(alias), COMMON_FEATURES_TABLE);
    }

    /**
     * Create an aliased <code>public.common_features_table</code> table
     * reference
     */
    public CommonFeaturesTable(Name alias) {
        this(alias, COMMON_FEATURES_TABLE);
    }

    /**
     * Create a <code>public.common_features_table</code> table reference
     */
    public CommonFeaturesTable() {
        this(DSL.name("common_features_table"), null);
    }

    public <O extends Record> CommonFeaturesTable(
            Table<O> path,
            ForeignKey<O, CommonFeaturesTableRecord> childPath,
            InverseForeignKey<O, CommonFeaturesTableRecord> parentPath) {
        super(path, childPath, parentPath, COMMON_FEATURES_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CommonFeaturesTablePath extends CommonFeaturesTable implements Path<CommonFeaturesTableRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> CommonFeaturesTablePath(
                Table<O> path,
                ForeignKey<O, CommonFeaturesTableRecord> childPath,
                InverseForeignKey<O, CommonFeaturesTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private CommonFeaturesTablePath(Name alias, Table<CommonFeaturesTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CommonFeaturesTablePath as(String alias) {
            return new CommonFeaturesTablePath(DSL.name(alias), this);
        }

        @Override
        public CommonFeaturesTablePath as(Name alias) {
            return new CommonFeaturesTablePath(alias, this);
        }

        @Override
        public CommonFeaturesTablePath as(Table<?> alias) {
            return new CommonFeaturesTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CommonFeaturesTableRecord, Integer> getIdentity() {
        return (Identity<CommonFeaturesTableRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CommonFeaturesTableRecord> getPrimaryKey() {
        return Keys.COMMON_FEATURES_TABLE_PKEY;
    }

    private transient HomeTablePath _homeTable;

    /**
     * Get the implicit to-many join path to the <code>public.home_table</code>
     * table
     */
    public HomeTablePath homeTable() {
        if (_homeTable == null)
            _homeTable = new HomeTablePath(
                    this,
                    null,
                    Keys.HOME_TABLE__HOME_TABLE_COMMON_FEATURES_TABLE_ID_COMMON_FEATURES_TABLE_ID_FK.getInverseKey());

        return _homeTable;
    }

    @Override
    public List<Check<CommonFeaturesTableRecord>> getChecks() {
        return Arrays.asList(
                Internal.createCheck(
                        this,
                        DSL.name("common_features_table_bath_quantity_check"),
                        "(((bath_quantity >= 0) AND (bath_quantity <= 5)))",
                        true),
                Internal.createCheck(
                        this,
                        DSL.name("common_features_table_bed_quantity_check"),
                        "(((bed_quantity >= 0) AND (bed_quantity <= 5)))",
                        true),
                Internal.createCheck(
                        this,
                        DSL.name("common_features_table_car_quantity_check"),
                        "(((car_quantity >= 0) AND (car_quantity <= 5)))",
                        true));
    }

    @Override
    public CommonFeaturesTable as(String alias) {
        return new CommonFeaturesTable(DSL.name(alias), this);
    }

    @Override
    public CommonFeaturesTable as(Name alias) {
        return new CommonFeaturesTable(alias, this);
    }

    @Override
    public CommonFeaturesTable as(Table<?> alias) {
        return new CommonFeaturesTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonFeaturesTable rename(String name) {
        return new CommonFeaturesTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonFeaturesTable rename(Name name) {
        return new CommonFeaturesTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonFeaturesTable rename(Table<?> name) {
        return new CommonFeaturesTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommonFeaturesTable where(Condition condition) {
        return new CommonFeaturesTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommonFeaturesTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommonFeaturesTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommonFeaturesTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CommonFeaturesTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CommonFeaturesTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CommonFeaturesTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CommonFeaturesTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommonFeaturesTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CommonFeaturesTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
