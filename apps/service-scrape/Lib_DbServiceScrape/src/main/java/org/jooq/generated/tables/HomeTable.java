/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;

import java.time.LocalTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Geometry;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.CommonFeaturesTable.CommonFeaturesTablePath;
import org.jooq.generated.tables.LocalitiesTable.LocalitiesTablePath;
import org.jooq.generated.tables.RentPriceTable.RentPriceTablePath;
import org.jooq.generated.tables.SalePriceTable.SalePriceTablePath;
import org.jooq.generated.tables.records.HomeTableRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class HomeTable extends TableImpl<HomeTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.home_table</code>
     */
    public static final HomeTable HOME_TABLE = new HomeTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HomeTableRecord> getRecordType() {
        return HomeTableRecord.class;
    }

    /**
     * The column <code>public.home_table.id</code>.
     */
    public final TableField<HomeTableRecord, Integer> ID =
            createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.home_table.localities_table_id</code>.
     */
    public final TableField<HomeTableRecord, Short> LOCALITIES_TABLE_ID =
            createField(DSL.name("localities_table_id"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.home_table.common_features_table_id</code>.
     */
    public final TableField<HomeTableRecord, Short> COMMON_FEATURES_TABLE_ID =
            createField(DSL.name("common_features_table_id"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.home_table.street_address</code>.
     */
    public final TableField<HomeTableRecord, String> STREET_ADDRESS =
            createField(DSL.name("street_address"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.home_table.gps</code>.
     */
    public final TableField<HomeTableRecord, Geometry> GPS =
            createField(DSL.name("gps"), SQLDataType.GEOMETRY.nullable(false), this, "");

    /**
     * The column <code>public.home_table.land_m2</code>.
     */
    public final TableField<HomeTableRecord, Short> LAND_M2 =
            createField(DSL.name("land_m2"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.home_table.inspection_time</code>.
     */
    public final TableField<HomeTableRecord, LocalTime> INSPECTION_TIME =
            createField(DSL.name("inspection_time"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>public.home_table.auction_time</code>.
     */
    public final TableField<HomeTableRecord, LocalTime> AUCTION_TIME =
            createField(DSL.name("auction_time"), SQLDataType.LOCALTIME(6), this, "");

    private HomeTable(Name alias, Table<HomeTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private HomeTable(Name alias, Table<HomeTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.home_table</code> table reference
     */
    public HomeTable(String alias) {
        this(DSL.name(alias), HOME_TABLE);
    }

    /**
     * Create an aliased <code>public.home_table</code> table reference
     */
    public HomeTable(Name alias) {
        this(alias, HOME_TABLE);
    }

    /**
     * Create a <code>public.home_table</code> table reference
     */
    public HomeTable() {
        this(DSL.name("home_table"), null);
    }

    public <O extends Record> HomeTable(
            Table<O> path, ForeignKey<O, HomeTableRecord> childPath, InverseForeignKey<O, HomeTableRecord> parentPath) {
        super(path, childPath, parentPath, HOME_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class HomeTablePath extends HomeTable implements Path<HomeTableRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> HomeTablePath(
                Table<O> path,
                ForeignKey<O, HomeTableRecord> childPath,
                InverseForeignKey<O, HomeTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private HomeTablePath(Name alias, Table<HomeTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public HomeTablePath as(String alias) {
            return new HomeTablePath(DSL.name(alias), this);
        }

        @Override
        public HomeTablePath as(Name alias) {
            return new HomeTablePath(alias, this);
        }

        @Override
        public HomeTablePath as(Table<?> alias) {
            return new HomeTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<HomeTableRecord, Integer> getIdentity() {
        return (Identity<HomeTableRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HomeTableRecord> getPrimaryKey() {
        return Keys.HOME_TABLE_PKEY;
    }

    @Override
    public List<ForeignKey<HomeTableRecord, ?>> getReferences() {
        return Arrays.asList(
                Keys.HOME_TABLE__HOME_TABLE_COMMON_FEATURES_TABLE_ID_COMMON_FEATURES_TABLE_ID_FK,
                Keys.HOME_TABLE__HOME_TABLE_LOCALITIES_TABLE_ID_LOCALITIES_TABLE_ID_FK);
    }

    private transient CommonFeaturesTablePath _commonFeaturesTable;

    /**
     * Get the implicit join path to the
     * <code>public.common_features_table</code> table.
     */
    public CommonFeaturesTablePath commonFeaturesTable() {
        if (_commonFeaturesTable == null)
            _commonFeaturesTable = new CommonFeaturesTablePath(
                    this, Keys.HOME_TABLE__HOME_TABLE_COMMON_FEATURES_TABLE_ID_COMMON_FEATURES_TABLE_ID_FK, null);

        return _commonFeaturesTable;
    }

    private transient LocalitiesTablePath _localitiesTable;

    /**
     * Get the implicit join path to the <code>public.localities_table</code>
     * table.
     */
    public LocalitiesTablePath localitiesTable() {
        if (_localitiesTable == null)
            _localitiesTable = new LocalitiesTablePath(
                    this, Keys.HOME_TABLE__HOME_TABLE_LOCALITIES_TABLE_ID_LOCALITIES_TABLE_ID_FK, null);

        return _localitiesTable;
    }

    private transient RentPriceTablePath _rentPriceTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.rent_price_table</code> table
     */
    public RentPriceTablePath rentPriceTable() {
        if (_rentPriceTable == null)
            _rentPriceTable = new RentPriceTablePath(
                    this, null, Keys.RENT_PRICE_TABLE__RENT_PRICE_TABLE_HOME_TABLE_ID_HOME_TABLE_ID_FK.getInverseKey());

        return _rentPriceTable;
    }

    private transient SalePriceTablePath _salePriceTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.sale_price_table</code> table
     */
    public SalePriceTablePath salePriceTable() {
        if (_salePriceTable == null)
            _salePriceTable = new SalePriceTablePath(
                    this, null, Keys.SALE_PRICE_TABLE__SALE_PRICE_TABLE_HOME_TABLE_ID_HOME_TABLE_ID_FK.getInverseKey());

        return _salePriceTable;
    }

    @Override
    public List<Check<HomeTableRecord>> getChecks() {
        return Arrays.asList(Internal.createCheck(
                this, DSL.name("home_table_street_address_check"), "((length(street_address) < 64))", true));
    }

    @Override
    public HomeTable as(String alias) {
        return new HomeTable(DSL.name(alias), this);
    }

    @Override
    public HomeTable as(Name alias) {
        return new HomeTable(alias, this);
    }

    @Override
    public HomeTable as(Table<?> alias) {
        return new HomeTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HomeTable rename(String name) {
        return new HomeTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HomeTable rename(Name name) {
        return new HomeTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HomeTable rename(Table<?> name) {
        return new HomeTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HomeTable where(Condition condition) {
        return new HomeTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HomeTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HomeTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HomeTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HomeTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HomeTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HomeTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HomeTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HomeTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HomeTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
